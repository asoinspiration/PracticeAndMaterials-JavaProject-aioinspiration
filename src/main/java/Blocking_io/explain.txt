传统的BIO
采用BIO通信模型的服务器端，通常由一个独立的Acceptor(接收者)线程负责监听客户端的连接，
它接收到客户端连接请求之后为每个客户端创建一个新的线程进行链接处理，处理完成之后，通过
输出流返回应答给客户端，线程销毁。这就是典型的以请求一应答通信模型。
该模型最大的问题就是缺乏弹性伸缩能力，当客户端并发访问量增加后，服务端的线程个数和客户
端并发访问数呈1:1的正比关系，由于线程是java虚拟机非常宝贵的系统资源，当线程膨胀后，系统
的性能将急剧下降，随着并发访问量的继续增大，系统会发生线程堆栈溢出、创建线程失败等问题
，并最终导致进程宕机或者僵死，不能对外提供服务。

（本例没有完整的处理网络的半包读写）